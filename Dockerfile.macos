# Optimized Dockerfile for RustOS Development on macOS
# This dockerfile is specifically optimized for Apple Silicon and Intel Macs

# Use Ubuntu 22.04 LTS for maximum compatibility
FROM ubuntu:22.04 as builder

# Avoid prompts from apt and set locale
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# Install system dependencies - optimized for kernel development
RUN apt-get update && apt-get install -y \
    # Essential build tools
    curl \
    wget \
    build-essential \
    gcc \
    nasm \
    git \
    pkg-config \
    libssl-dev \
    # QEMU for emulation (lighter set for macOS)
    qemu-system-x86 \
    qemu-utils \
    # Boot image creation tools
    grub-common \
    grub2-common \
    mtools \
    xorriso \
    # Development utilities
    vim \
    less \
    htop \
    tree \
    file \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user with appropriate permissions
RUN useradd -m -s /bin/bash -u 1000 rustdev && \
    usermod -aG sudo rustdev && \
    echo 'rustdev ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Switch to rustdev user
USER rustdev
WORKDIR /home/rustdev

# Install Rust toolchain (nightly for kernel development)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    --default-toolchain nightly \
    --component rust-src \
    --component llvm-tools-preview \
    --component rustfmt \
    --component clippy

# Update PATH
ENV PATH="/home/rustdev/.cargo/bin:${PATH}"

# Install bootimage and other essential tools
RUN cargo install bootimage cargo-binutils

# Verify installation
RUN rustc --version && \
    cargo --version && \
    rustup component list --installed

# Set up workspace
WORKDIR /home/rustdev/rustos

# Create optimized build environment
ENV RUST_TARGET_PATH="/home/rustdev/rustos"
ENV RUSTFLAGS="-C target-cpu=native"
ENV CARGO_INCREMENTAL=1

# Create helpful scripts for macOS development
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🚀 RustOS macOS Development Environment"\n\
echo "======================================"\n\
echo ""\n\
echo "Available commands:"\n\
echo "  build-kernel      - Build the kernel"\n\
echo "  create-bootimage  - Create bootable image"\n\
echo "  test-kernel       - Run tests"\n\
echo "  run-qemu          - Run in QEMU (headless)"\n\
echo "  check-env         - Check environment"\n\
echo "  clean-build       - Clean build artifacts"\n\
echo ""\n\
echo "Build targets:"\n\
echo "  cargo build --target x86_64-rustos.json"\n\
echo "  cargo build --target x86_64-rustos.json --release"\n\
echo ""\n\
echo "Project info:"\n\
echo "  Rust version: $(rustc --version)"\n\
echo "  Cargo version: $(cargo --version)"\n\
if [ -f "Cargo.toml" ]; then\n\
  echo "  Project: $(grep '"'"'^name.*='"'"' Cargo.toml | cut -d'"'"'"'"'"' -f4) v$(grep '"'"'^version.*='"'"' Cargo.toml | cut -d'"'"'"'"'"' -f4)"\n\
fi\n\
echo ""\n\
' > /home/rustdev/.bashrc_extra && chmod +x /home/rustdev/.bashrc_extra

# Add to bashrc
RUN echo 'source ~/.bashrc_extra' >> /home/rustdev/.bashrc

# Copy project files (done at runtime via volume mount)
# COPY --chown=rustdev:rustdev . .

# Create build script optimized for macOS
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🔨 Building RustOS kernel..."\n\
echo "Target: x86_64-rustos.json"\n\
echo ""\n\
\n\
# Check if target file exists\n\
if [ ! -f "x86_64-rustos.json" ]; then\n\
  echo "❌ Target specification not found: x86_64-rustos.json"\n\
  echo "Please ensure you'"'"'re in the RustOS project directory"\n\
  exit 1\n\
fi\n\
\n\
# Clean previous build if requested\n\
if [ "$1" = "--clean" ]; then\n\
  echo "🧹 Cleaning previous build..."\n\
  cargo clean\n\
  echo ""\n\
fi\n\
\n\
# Build kernel\n\
echo "⚙️  Compiling kernel..."\n\
time cargo build --target x86_64-rustos.json\n\
\n\
if [ $? -eq 0 ]; then\n\
  echo ""\n\
  echo "✅ Kernel build successful!"\n\
  \n\
  # Show binary info\n\
  KERNEL_BIN=$(find target -name '"'"'rustos'"'"' -type f | head -1)\n\
  if [ -n "$KERNEL_BIN" ]; then\n\
    echo "📦 Kernel binary: $KERNEL_BIN"\n\
    echo "📏 Size: $(du -h $KERNEL_BIN | cut -f1)"\n\
  fi\n\
else\n\
  echo "❌ Build failed"\n\
  exit 1\n\
fi\n\
' > /usr/local/bin/build-kernel && chmod +x /usr/local/bin/build-kernel

# Create bootimage script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "💿 Creating bootable image..."\n\
echo ""\n\
\n\
# Build kernel first if needed\n\
if [ ! -d "target/x86_64-rustos.json" ]; then\n\
  echo "🔨 Building kernel first..."\n\
  build-kernel\n\
  echo ""\n\
fi\n\
\n\
# Create bootimage\n\
echo "⚙️  Creating bootable image..."\n\
time bootimage build --target x86_64-rustos.json\n\
\n\
if [ $? -eq 0 ]; then\n\
  echo ""\n\
  echo "✅ Bootimage created successfully!"\n\
  \n\
  # Find and show bootimage info\n\
  BOOTIMAGE=$(find target -name '"'"'bootimage-*.bin'"'"' -type f | head -1)\n\
  if [ -n "$BOOTIMAGE" ]; then\n\
    echo "💿 Bootimage: $BOOTIMAGE"\n\
    echo "📏 Size: $(du -h $BOOTIMAGE | cut -f1)"\n\
    echo "🔍 SHA256: $(sha256sum $BOOTIMAGE | cut -d'"'"' '"'"' -f1)"\n\
  fi\n\
else\n\
  echo "❌ Bootimage creation failed"\n\
  exit 1\n\
fi\n\
' > /usr/local/bin/create-bootimage && chmod +x /usr/local/bin/create-bootimage

# Create test script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "🧪 Running RustOS tests..."\n\
echo ""\n\
\n\
# Run tests\n\
echo "⚙️  Running unit tests..."\n\
cargo test --target x86_64-rustos.json --lib\n\
\n\
echo ""\n\
echo "⚙️  Running integration tests..."\n\
cargo test --target x86_64-rustos.json --test integration_test 2>/dev/null || echo "No integration tests found"\n\
\n\
echo ""\n\
echo "✅ Tests completed!"\n\
' > /usr/local/bin/test-kernel && chmod +x /usr/local/bin/test-kernel

# Create QEMU runner optimized for macOS Docker
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Find bootimage\n\
BOOTIMAGE=$(find target -name '"'"'bootimage-*.bin'"'"' -type f | head -1)\n\
\n\
if [ -z "$BOOTIMAGE" ]; then\n\
  echo "❌ No bootimage found. Run create-bootimage first."\n\
  exit 1\n\
fi\n\
\n\
echo "🚀 Starting RustOS in QEMU..."\n\
echo "Bootimage: $BOOTIMAGE"\n\
echo ""\n\
echo "💡 QEMU Controls:"\n\
echo "   Ctrl+A, X    - Exit QEMU"\n\
echo "   Ctrl+A, C    - QEMU monitor"\n\
echo "   Ctrl+C       - Stop this script"\n\
echo ""\n\
\n\
# Run QEMU with optimized settings for macOS Docker\n\
qemu-system-x86_64 \\\n\
  -drive format=raw,file="$BOOTIMAGE" \\\n\
  -serial stdio \\\n\
  -device isa-debug-exit,iobase=0xf4,iosize=0x04 \\\n\
  -display none \\\n\
  -m 512M \\\n\
  -cpu qemu64 \\\n\
  -no-reboot \\\n\
  -no-shutdown\n\
' > /usr/local/bin/run-qemu && chmod +x /usr/local/bin/run-qemu

# Create environment checker
RUN echo '#!/bin/bash\n\
echo "🔍 RustOS Development Environment Check"\n\
echo "====================================="\n\
echo ""\n\
\n\
echo "System Info:"\n\
echo "  OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"'"'"'"'"' -f2)"\n\
echo "  Architecture: $(uname -m)"\n\
echo "  User: $(whoami)"\n\
echo "  Working directory: $(pwd)"\n\
echo ""\n\
\n\
echo "Rust Toolchain:"\n\
echo "  Rust: $(rustc --version)"\n\
echo "  Cargo: $(cargo --version)"\n\
echo "  Rustup: $(rustup --version | head -1)"\n\
echo ""\n\
\n\
echo "Installed components:"\n\
rustup component list --installed | sed '"'"'s/^/  /'"'"'\n\
echo ""\n\
\n\
echo "Build tools:"\n\
echo "  NASM: $(nasm --version | head -1)"\n\
echo "  GCC: $(gcc --version | head -1)"\n\
echo "  QEMU: $(qemu-system-x86_64 --version | head -1)"\n\
echo ""\n\
\n\
echo "Project files:"\n\
if [ -f "Cargo.toml" ]; then\n\
  echo "  ✅ Cargo.toml found"\n\
else\n\
  echo "  ❌ Cargo.toml not found"\n\
fi\n\
\n\
if [ -f "x86_64-rustos.json" ]; then\n\
  echo "  ✅ Target specification found"\n\
else\n\
  echo "  ❌ x86_64-rustos.json not found"\n\
fi\n\
\n\
if [ -d "src" ]; then\n\
  echo "  ✅ Source directory found ($(find src -name '"'"'*.rs'"'"' | wc -l) Rust files)"\n\
else\n\
  echo "  ❌ Source directory not found"\n\
fi\n\
echo ""\n\
\n\
echo "Available scripts:"\n\
echo "  build-kernel, create-bootimage, test-kernel, run-qemu"\n\
echo ""\n\
\n\
echo "Environment variables:"\n\
echo "  RUST_TARGET_PATH: $RUST_TARGET_PATH"\n\
echo "  RUSTFLAGS: $RUSTFLAGS"\n\
echo "  PATH: $PATH"\n\
echo ""\n\
' > /usr/local/bin/check-env && chmod +x /usr/local/bin/check-env

# Create clean script
RUN echo '#!/bin/bash\n\
echo "🧹 Cleaning build artifacts..."\n\
echo ""\n\
\n\
echo "Cleaning Cargo cache and target directory..."\n\
cargo clean\n\
\n\
echo "Removing any leftover bootimages..."\n\
find . -name '"'"'bootimage-*.bin'"'"' -delete 2>/dev/null || true\n\
\n\
echo "✅ Clean completed!"\n\
echo ""\n\
echo "Disk usage:"\n\
du -sh . 2>/dev/null || echo "Could not determine disk usage"\n\
' > /usr/local/bin/clean-build && chmod +x /usr/local/bin/clean-build

# Set default command
CMD ["check-env"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD rustc --version && cargo --version || exit 1

# Labels
LABEL maintainer="RustOS Team"
LABEL description="RustOS Kernel Development Environment - Optimized for macOS"
LABEL version="1.1-macos"
LABEL os="linux"
LABEL architecture="x86_64"