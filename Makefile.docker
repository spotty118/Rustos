# Makefile for Docker operations with RustOS
# Provides convenient commands for building, testing, and running RustOS in Docker

.PHONY: help build build-no-cache up dev shell build-only qemu test clean clean-all logs exec stop restart status volumes images

# Default target
.DEFAULT_GOAL := help

# Project configuration
PROJECT_NAME := rustos
IMAGE_NAME := $(PROJECT_NAME):latest
CONTAINER_PREFIX := rustos-kernel

# Docker and Docker Compose commands
DOCKER := docker
DOCKER_COMPOSE := docker-compose
DOCKER_EXEC := $(DOCKER) exec -it

# Colors for output
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
BLUE := \033[34m
NC := \033[0m # No Color

help: ## Show this help message
	@echo "$(GREEN)RustOS Docker Makefile$(NC)"
	@echo "Available commands:"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(BLUE)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)Examples:$(NC)"
	@echo "  make build        # Build Docker image"
	@echo "  make dev          # Start development environment"
	@echo "  make test         # Run full test suite"
	@echo "  make shell        # Interactive development shell"
	@echo "  make clean        # Clean up containers and volumes"

build: ## Build the Docker image
	@echo "$(GREEN)Building RustOS Docker image...$(NC)"
	$(DOCKER_COMPOSE) build rustos-dev

build-no-cache: ## Build Docker image without cache
	@echo "$(GREEN)Building RustOS Docker image (no cache)...$(NC)"
	$(DOCKER_COMPOSE) build --no-cache rustos-dev

up: ## Start all services
	@echo "$(GREEN)Starting RustOS services...$(NC)"
	$(DOCKER_COMPOSE) up

dev: ## Run full development pipeline (build + test)
	@echo "$(GREEN)Running RustOS development pipeline...$(NC)"
	$(DOCKER_COMPOSE) --profile dev up rustos-dev

shell: ## Start interactive development shell
	@echo "$(GREEN)Starting RustOS development shell...$(NC)"
	$(DOCKER_COMPOSE) --profile shell up -d rustos-shell
	@echo "$(YELLOW)Attaching to shell (use 'exit' to leave, container will keep running)$(NC)"
	$(DOCKER_EXEC) $(CONTAINER_PREFIX)-shell bash

shell-stop: ## Stop the development shell
	@echo "$(GREEN)Stopping development shell...$(NC)"
	$(DOCKER_COMPOSE) stop rustos-shell
	$(DOCKER_COMPOSE) rm -f rustos-shell

build-only: ## Build kernel only (no tests)
	@echo "$(GREEN)Building RustOS kernel only...$(NC)"
	$(DOCKER_COMPOSE) --profile build up rustos-build

test: ## Run comprehensive tests
	@echo "$(GREEN)Running RustOS test suite...$(NC)"
	$(DOCKER_COMPOSE) --profile test up rustos-dev

test-unit: ## Run unit tests only
	@echo "$(GREEN)Running unit tests...$(NC)"
	$(DOCKER_COMPOSE) run --rm rustos-dev cargo test --target x86_64-rustos.json

test-build: ## Test build process
	@echo "$(GREEN)Testing build process...$(NC)"
	$(DOCKER_COMPOSE) run --rm rustos-dev ./build_kernel.sh

bootimage: ## Create bootable image
	@echo "$(GREEN)Creating bootable image...$(NC)"
	$(DOCKER_COMPOSE) run --rm rustos-dev ./create_bootimage.sh

qemu: ## Run kernel in QEMU (requires bootimage)
	@echo "$(GREEN)Running RustOS in QEMU...$(NC)"
	@echo "$(YELLOW)Press Ctrl+A, then X to exit QEMU$(NC)"
	$(DOCKER_COMPOSE) --profile qemu up rustos-qemu

qemu-headless: ## Run kernel in QEMU headless mode
	@echo "$(GREEN)Running RustOS in QEMU (headless)...$(NC)"
	$(DOCKER_COMPOSE) run --rm rustos-dev bash -c "timeout 30s ./run_qemu.sh || echo 'QEMU test completed'"

# Development workflow commands
dev-cycle: build test bootimage ## Complete development cycle: build -> test -> bootimage
	@echo "$(GREEN)Development cycle completed!$(NC)"

quick-test: ## Quick build and basic test
	@echo "$(GREEN)Running quick test...$(NC)"
	$(DOCKER_COMPOSE) run --rm rustos-dev bash -c "./build_kernel.sh && echo 'Build successful!'"

release: ## Build release version
	@echo "$(GREEN)Building release version...$(NC)"
	$(DOCKER_COMPOSE) run --rm rustos-dev cargo build --target x86_64-rustos.json --release
	$(DOCKER_COMPOSE) run --rm rustos-dev bootimage build --target x86_64-rustos.json --release

# Container management
logs: ## Show logs from all services
	$(DOCKER_COMPOSE) logs -f

logs-dev: ## Show logs from development service
	$(DOCKER_COMPOSE) logs -f rustos-dev

exec: ## Execute command in running development container
	@echo "$(YELLOW)Usage: make exec CMD='command to run'$(NC)"
	$(DOCKER_EXEC) $(CONTAINER_PREFIX)-shell $(CMD)

exec-root: ## Execute command as root in development container
	@echo "$(YELLOW)Usage: make exec-root CMD='command to run'$(NC)"
	$(DOCKER) exec -it --user root $(CONTAINER_PREFIX)-shell $(CMD)

stop: ## Stop all services
	@echo "$(GREEN)Stopping all services...$(NC)"
	$(DOCKER_COMPOSE) stop

restart: ## Restart all services
	@echo "$(GREEN)Restarting all services...$(NC)"
	$(DOCKER_COMPOSE) restart

status: ## Show status of all containers
	@echo "$(GREEN)Container status:$(NC)"
	$(DOCKER_COMPOSE) ps
	@echo ""
	@echo "$(GREEN)Images:$(NC)"
	$(DOCKER) images | grep $(PROJECT_NAME) || echo "No RustOS images found"

# Cleanup commands
clean: ## Clean up containers and volumes
	@echo "$(GREEN)Cleaning up containers and volumes...$(NC)"
	$(DOCKER_COMPOSE) down --volumes --remove-orphans

clean-images: ## Remove RustOS Docker images
	@echo "$(GREEN)Removing RustOS Docker images...$(NC)"
	$(DOCKER) images -q $(PROJECT_NAME) | xargs -r $(DOCKER) rmi -f

clean-all: clean clean-images ## Complete cleanup (containers, volumes, images)
	@echo "$(GREEN)Complete cleanup finished$(NC)"

clean-build-cache: ## Clean only build cache volume
	@echo "$(GREEN)Cleaning build cache...$(NC)"
	$(DOCKER) volume rm -f $(shell $(DOCKER_COMPOSE) config --volumes | grep build-cache)

clean-cargo-cache: ## Clean only cargo cache volumes
	@echo "$(GREEN)Cleaning cargo cache...$(NC)"
	$(DOCKER) volume rm -f $(shell $(DOCKER_COMPOSE) config --volumes | grep cargo)

reset: clean-all build ## Reset everything and rebuild
	@echo "$(GREEN)Reset completed - ready for fresh start$(NC)"

# Information commands
volumes: ## List project volumes
	@echo "$(GREEN)Project volumes:$(NC)"
	$(DOCKER) volume ls | grep $(shell basename $(PWD)) || echo "No project volumes found"

images: ## List project images
	@echo "$(GREEN)Project images:$(NC)"
	$(DOCKER) images | grep $(PROJECT_NAME) || echo "No RustOS images found"

disk-usage: ## Show Docker disk usage
	@echo "$(GREEN)Docker disk usage:$(NC)"
	$(DOCKER) system df

inspect: ## Inspect the main RustOS image
	@echo "$(GREEN)RustOS image details:$(NC)"
	$(DOCKER) inspect $(IMAGE_NAME) 2>/dev/null || echo "Image not found. Run 'make build' first."

# Advanced commands
debug-shell: ## Start debug shell with all debugging tools
	@echo "$(GREEN)Starting debug shell...$(NC)"
	$(DOCKER_COMPOSE) run --rm --entrypoint=/bin/bash rustos-dev

benchmark: ## Run performance benchmarks
	@echo "$(GREEN)Running benchmarks...$(NC)"
	$(DOCKER_COMPOSE) run --rm rustos-dev bash -c "cargo build --target x86_64-rustos.json --release && echo 'Release build completed for benchmarking'"

lint: ## Run linting and formatting checks
	@echo "$(GREEN)Running lint checks...$(NC)"
	$(DOCKER_COMPOSE) run --rm rustos-dev bash -c "cargo fmt --check && cargo clippy --target x86_64-rustos.json" || echo "Linting tools not available in minimal setup"

docs: ## Generate and view documentation
	@echo "$(GREEN)Generating documentation...$(NC)"
	$(DOCKER_COMPOSE) run --rm rustos-dev cargo doc --target x86_64-rustos.json --no-deps

# CI/CD helpers
ci-build: build-no-cache test-build ## CI build pipeline
	@echo "$(GREEN)CI build pipeline completed$(NC)"

ci-test: test bootimage ## CI test pipeline
	@echo "$(GREEN)CI test pipeline completed$(NC)"

ci-full: ci-build ci-test ## Full CI pipeline
	@echo "$(GREEN)Full CI pipeline completed$(NC)"

# Custom targets for specific use cases
kernel-only: ## Build just the kernel binary
	$(DOCKER_COMPOSE) run --rm rustos-dev cargo build --target x86_64-rustos.json

kernel-release: ## Build kernel in release mode
	$(DOCKER_COMPOSE) run --rm rustos-dev cargo build --target x86_64-rustos.json --release

check: ## Check code compilation without building
	$(DOCKER_COMPOSE) run --rm rustos-dev cargo check --target x86_64-rustos.json

fmt: ## Format code
	$(DOCKER_COMPOSE) run --rm rustos-dev cargo fmt

# Help for common issues
troubleshoot: ## Show common troubleshooting commands
	@echo "$(YELLOW)Common troubleshooting commands:$(NC)"
	@echo ""
	@echo "  $(BLUE)Build issues:$(NC)"
	@echo "    make clean-build-cache  # Clear build cache"
	@echo "    make build-no-cache     # Rebuild without cache"
	@echo ""
	@echo "  $(BLUE)Permission issues:$(NC)"
	@echo "    sudo chown -R \$$USER:\$$USER ."
	@echo ""
	@echo "  $(BLUE)Disk space issues:$(NC)"
	@echo "    make disk-usage         # Check disk usage"
	@echo "    make clean-all          # Clean everything"
	@echo "    docker system prune -a  # Clean Docker system"
	@echo ""
	@echo "  $(BLUE)Container issues:$(NC)"
	@echo "    make logs               # View container logs"
	@echo "    make status             # Check container status"
	@echo "    make restart            # Restart services"

# Version and environment info
version: ## Show version information
	@echo "$(GREEN)Environment Information:$(NC)"
	@echo "Docker version:"
	@$(DOCKER) --version
	@echo "Docker Compose version:"
	@$(DOCKER_COMPOSE) --version
	@echo "Project: $(PROJECT_NAME)"
	@echo "Image: $(IMAGE_NAME)"
